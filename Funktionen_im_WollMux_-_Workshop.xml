<?xml version="1.0"?><api><query><normalized><n from="Funktionen_im_WollMux_-_Workshop" to="Funktionen im WollMux - Workshop" /></normalized><pages><page pageid="113" ns="0" title="Funktionen im WollMux - Workshop"><revisions><rev contentformat="text/x-wiki" contentmodel="wikitext" xml:space="preserve">Hier entstehen die Inhalte eines Workshops zu den Funktionen die definiert werden können, um den WollMux auf eigene Bedürfnisse anzupassen:

= Wozu werden Funktionen benötigt? =
Der WollMux führt an vielen Stellen sog. Funktionen aus, in denen Geschäftslogik enthalten sein kann. Funktionen werden z.B. in folgenden Elementen verwendet:
* Im Dokumentkommando [[Dokumentkommandos_des_WollMux#Das_Kommando_.22insertFunctionValue.22 | insertFunctionValue]]: WM(CMD 'insertFunctionValue' FUNCTION '&lt;Funktion&gt;' ARGS('&lt;arg1&gt;', '&lt;arg2&gt;', '&lt;argN&gt;'))
* Im Dokumentkommando [[Dokumentkommandos_des_WollMux#Das_Kommando_.22insertValue.22 | insertValue]]: WM(CMD 'insertValue' DB_SPALTE '&lt;spaltenname&gt;' TRAFO '&lt;Funktionsbezeichner&gt;')
* Im Dokumentkommando [[Dokumentkommandos_des_WollMux#Das_Kommando_.22insertFormValue.22 | insertFormValue]]: WM(CMD 'insertFormValue' ID '&lt;feldId&gt;' TRAFO '&lt;Funktionsbezeichner&gt;')
* In Formularen als Plausis
* In Formularen als Autofill

Funktionen sind ein zentrales Mittel zur Steuerung des WollMux.

= Wo befindet sich die Dokumentation zu den Funktionen? =
Da Funktionen in der wollmux.conf definiert werden, befindet sich die Dokumentation aller möglichen Funktionen in einem Unterabschnitt der Dokumentation von wollmux.conf: [[Konfigurationsdatei_wollmux.conf#Funktionen | Funktionen]]

Einen guten Überblick über alle Funktionen erhält man über das [[Konfigurationsdatei_wollmux.conf | Inhaltsverzeichnis der Beschreibung der wollmux.conf]] in Kapitel 12.

= Übung: Elementarfunktion String =
* Editieren der wollmux.conf des aktuellen Benutzers und Hinzufügen einer neuen Funktion:
 Funktionen(
   HelloWorld(&quot;Hallo Welt, dies ist meine erste Funktion&quot;)
 )

* Erstellen einer neuen Vorlage und Einbinden der soeben geschriebenen HelloWorld-Funktion über das Dokumentkommando insertFunctionValue:
 WM(CMD 'insertFunctionValue' FUNCTION 'HelloWorld')

* Testen der Funktion durch Öffnen der Vorlage

;Anmerkung: Die Funktion ist sehr einfach und erwartet keine Parameter.

= Übung: Sachbearbeiterdaten transformieren 1 =
Demonstriert die Möglichkeit, eine Funktion mit einem Parameter mit den Hausmitteln des WollMux zu schreiben.

* Editieren der wollmux.conf des aktuellen Benutzers und Hinzufügen einer neuen Funktion:
 Funktionen(
   MyFirstTrafo(CAT(&quot;X&quot; VALUE &quot;arg1&quot; &quot;Y&quot;))
 )

* Erstellen einer neuen Vorlage und Einbinden der soeben geschriebenen Funktion als TRAFO für insertValue:
 WM(CMD 'insertValue' DB_SPALTE 'Vorname' TRAFO 'MyFirstTrafo')

* Testen der Funktion durch Öffnen der Vorlage

;Anmerkung: Die Funktion erwartet genau einen Parameter, der innerhalb der Funktion &quot;arg1&quot; genannt wird. Beim Ausführen des insertValue-Befehls wird das Sachbearbeiterfeld &quot;Vorname&quot; als Argument &quot;arg1&quot; übergeben.

= Übung: Sachbearbeiterdaten transformieren 2 =
Demonstriert die Mächtigkeit der bereits in WollMux verfügbaren Funktionen:

* Editieren der wollmux.conf des aktuellen Benutzers und Hinzufügen einer neuen Funktion:
 Funktionen(
   DerSachbearbeiterDieSachbearbeiterin(IF(MATCH(VALUE &quot;Anrede&quot; &quot;Herr&quot;) THEN &quot;Der Sachbearbeiter&quot; ELSE &quot;Die Sachbearbeiterin&quot;))
 )

* Erstellen einer neuen Vorlage und Einbinden der soeben geschriebenen Funktion als TRAFO für insertValue:
 WM(CMD 'insertValue' DB_SPALTE 'Anrede' TRAFO 'DerSachbearbeiterDieSachbearbeiterin')

* Testen der Funktion durch Öffnen der Vorlage

;Anmerkung: 
* Die Funktion erwartet genau einen Parameter, der innerhalb der Funktion &quot;Anrede&quot; genannt wird. Beim Ausführen des insertValue-Befehls wird das Sachbearbeiterfeld &quot;Anrede&quot; als Argument &quot;Anrede&quot; übergeben.
* '''Bevor man zu externen Funktionen greift, sollte man sich immer überlegen, ob die Mittel des WollMux die Anforderung nicht bereits abdecken können.'''
** Bisher wurden nur 5 von 12 möglichen internen Funktionen genutzt.


;Beobachtung am Rande: 
* Der FormularMax 4000 (FM4000) zeigt die soeben definierten Funktionen auch an! 
** Externen Briefkopf öffnen, FM4000 starten, auf Reiter &quot;Einfügungen&quot; wechseln und schauen, welche Funktionen bei Trafos angeboten werden.

= Übung: Erste externe Funktion &quot;HelloWorldExtern&quot; =
Demonstriert, wie eine externe Funktion in Basic geschrieben werden kann.

* Schreiben einer Funktion in Basic unter MeineMakros-&gt;Standard/Module1:
 Sub helloWorld as String
   helloWorld=&quot;Hallo Welt, dies ist meine erste externe Funktion&quot;
 End Sub

* Bekanntmachen der Funktion im WollMux (Editieren der wollmux.conf)
 Funktionen(
   HelloWorldExtern(EXTERN(URL &quot;vnd.sun.star.script:Standard.Module1.helloWorld?language=Basic&amp;location=application&quot;
         PARAMS()))
 )

* Erstellen einer neuen Vorlage und Einbinden der soeben geschriebenen HelloWorldExtern-Funktion über das Dokumentkommando insertFunctionValue:
 WM(CMD 'insertFunctionValue' FUNCTION 'HelloWorldExtern')

* Testen der Funktion durch Öffnen der Vorlage

;Anmerkung: 
* Die Funktion ist sehr einfach und erwartet keine Parameter. Der Schlüssel PARAMS enthält keine Werte.

= Übung: Erste einfache Arithmetik in Basic =
Demonstriert, wie eine externe Funktion in Basic geschrieben werden kann, die Berechnungen vornimmt und dazu ein Argument erwartet.

* Schreiben einer Funktion in Basic unter MeineMakros-&gt;Standard/Module1:
 Sub isOlderThan21(alter as Integer) as String
    result = &quot;false&quot;
      if(alter &gt;= 21) then
        result = &quot;true&quot;
      end if
    isOlderThan21 = result
 End Sub

* Bekanntmachen der Funktion im WollMux (Editieren der wollmux.conf)
 Funktionen(
   IsOlderThan21(EXTERN(URL &quot;vnd.sun.star.script:Standard.Module1.isOlderThan21?language=Basic&amp;location=application&quot;
         PARAMS(&quot;alter&quot;)))
 )

* Öffnen einer Mischvorlage (z.B. für den internen Briefkopf)
* Einfügen von zwei Eingabefeldern: &quot;Alter &lt;&lt;alter&gt;&gt;&quot; und &quot;AlterOk &lt;&lt;alter&gt;&gt;&quot; mit der Vorbelegung &quot;Alter&quot; bzw. &quot;Alter Ok?&quot;
* Starten des FM4000
* Formular-&gt;Formularfelder aus Dokument einlesen
* Umbenennen der Einfügung &quot;alter1&quot; in &quot;alter&quot; und setzen der Trafo &quot;IsOlderThan21&quot;
* Speichern der Vorlage und Testen der Funktion durch Öffnen der Vorlage

;Anmerkung: 
* Die Funktion erwartet einen Parameter, der dem WollMux im Schlüssel PARAMS bekannt gemacht wird.
* Über den FM4000 erzeugen wir (indirekt) ein Dokumentkommando der Form &quot;WM(CMD 'insertFormValue' TRAFO 'IsOlderThan21')&quot;
* Die Funktion bekommt damit automatisch den Wert als Parameter übergeben, der im Formularfeld angezeigt würde, wenn es keine Trafo gäbe.

= Übung: BasicMakro am Dokument =
* Kopieren des vorher erstellten Basic-Makros in eine gleichnamige Bibliothek in der Vorlage selbst.
* Umbenennen der bisherigen Funktion im globalen Bereich, so dass nicht ausversehen die globale Funktion angesprungen wird.

;Beobachtungen:
* Es erscheint beim Öffnen der Vorlage die Abfrage &quot;Makros aktivieren?&quot;
* '''Das Makro wird erkannt! Makros am Dokument funktionieren nicht zusammen mit dem WollMux!'''

;Fazit:
* Basic-Makros müssen immer global bekannt sein!
* Offene Frage: Wie können Funktionen geschrieben werden, die auf allen Rechnern global bekannt sind?

= Übung: Erstellung eines Uno-Paketes =
* Unter Extras-&gt;Makros-&gt;OOo Basic: Über &quot;Verwalten&quot; eine neue Bibliothek mit dem Namen &quot;POR&quot; erstellen.
* unter POR ein Modul &quot;WollMuxFunctions&quot; erstellen.
* Die Funktion isOlderThan21 dort hin kopieren.
* Über &quot;Verwalten/Bibliotheken/Export&quot; die Bibliothek POR exportieren (geht erst ab 2.0.3) und danach POR löschen.
* Über den Extension-Manager die neue Extension importieren.
* in der wollmux.conf unter Funktionen alle die externe Funktion an die neuen Bibliotheksnamen anpassen.
* Vorlage testen

;Fazit:
* Uno-Pakete haben viele Vorteile:
** Sie ermöglichen eine zentrale Pflege aller Makros
** Sie sind strategiekonform und vermeiden Wildwuchs durch Makros am Dokument.
** Sie sind innerhalb eines Referats einfach zu installieren.
* Nachteile:
** Keine einfache stadtübergreifende Installation, da nicht jedes Referat einen geeigneten Verteilmechanismus besitzt.
** '''Nicht zu gebrauchen für stadtweit genutzte Vorlagen'''

= Übung: HelloWorld in Java =
Zeigt eine sinnvolle Alternative zu Basic-Macros auf:

* Verzeichnisstruktur de/muenchen/por erzeugen: mkdir -p de/muenchen/por
* cd de/muenchen/por
* Erstellung eines HelloWorld-Programms HelloWorld.java:
 package de.muenchen.por;
 
 public class HelloWorld {
   public static String helloWorldJava() {
           return &quot;HelloWorld mit Java&quot;;
   }
 }
* Aufrufen von javac HelloWorld.java
* Eintragen der Funktion in der wollmux.conf:
 Funktionen(
   HelloWorldJava(EXTERN(URL &quot;java:de.muenchen.por.HelloWorld.helloWorldJava&quot; 
       PARAMS()))
 )
* Eintragen einer CLASSPATH-Anweisung in wollmux.conf:
 CLASSPATH(&quot;file:///home/christoph.lutz/&quot;)
* Erzeugen einer neuen Vorlage und Einbinden einer entsprechenden Trafo:
 WM(CMD 'insertFunctionValue' FUNCTION 'HelloWorldJava')
* Testen der Vorlage

;Anmerkung:
* Der Classpath kann auch URLs enthalten, die auf einen Webserver verweisen. Damit sind die Methoden automatisch stadtweit verfügbar!
* Zentrale Pflege der Funktionen
* Kein Wildwuchs durch Makros am Dokument
* Kein Aufwand auf Seiten anderere Referate (nur der Eintrag der CLASSPATH-Anweisung ist notwendig)
* '''Die Verwendung von Java-Funktionen anstelle von Basic-Funktionen wird von D-III-ITD-5.1 dringend empfohlen!'''
* '''D-III-ITD-5.1 ist jederzeit gerne bereit, die Referate bei der Erstellung von entsprechenden Java-Klassen zu unterstützen.'''
** Angebot: gebt uns beliebige Funktionen in Pseudo-Code und wir setzen sie als Java-Klassen um.

= Übung: Mehrere Parameter über BIND verwenden =
* Basic-Makro:
 Sub is6MoreThanY(x as Integer, y as Integer) as String
      result = &quot;false&quot;
      if(x = y+6) then
        result = &quot;true&quot;
      end if
      is6MoreThanY = result
 End Sub

* wollmux.conf:
 Is6MoreThanY(EXTERN(URL &quot;vnd.sun.star.script:POR.WollMuxFunctions.is6MoreThanY?language=Basic&amp;location=application&quot; PARAMS(&quot;x&quot; &quot;y&quot;)))    

* Vorlage bearbeiten und FM4000 starten
* Bind wird vom FormularMax 4000 automatisch erzeugt.
* Über die Anpassung der Formularbeschreibung kann man Verknüpfung mit anderen Feldern herstellen



[[Kategorie:Wollmuxpraxis]]
[[Kategorie:Handbuch des WollMux]]</rev></revisions></page></pages></query></api>